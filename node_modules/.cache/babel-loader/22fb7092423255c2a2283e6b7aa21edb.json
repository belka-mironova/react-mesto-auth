{"ast":null,"code":"class Api {\n  constructor(config) {\n    this._baseUrl = config.url;\n    this._headers = config.headers;\n  } //приватная функция проверки ответа\n\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Error: ${res.status}`);\n  } //получить карточки с сервера (GET)\n\n\n  getInitialCards() {\n    return fetch(this._baseUrl + \"/cards\", {\n      method: \"GET\",\n      headers: this._headers\n    }).then(this._checkResponse);\n  } //добавить карточку (POST)\n\n\n  postCard(data) {\n    return fetch(this._baseUrl + \"/cards\", {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._checkResponse);\n  } //удалить карточку (DELETE)\n\n\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(this._checkResponse);\n  } //получить данные пользователя (GET)\n\n\n  getUserData() {\n    return fetch(this._baseUrl + \"/users/me\", {\n      method: \"GET\",\n      headers: this._headers\n    }).then(this._checkResponse);\n  } //заменить данные пользователя (PATCH)\n\n\n  setUserData(data) {\n    return fetch(this._baseUrl + \"/users/me\", {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._checkResponse);\n  } //заменить аватар (PATCH)\n\n\n  setNewAvatar(data) {\n    return fetch(this._baseUrl + `/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  } //“залайкать” карточку (PUT)\n\n\n  setLikeCard(id) {\n    return fetch(this._baseUrl + `/cards/likes/${id}`, {\n      method: \"PUT\",\n      headers: this._headers\n    }).then(this._checkResponse);\n  } //удалить лайк карточки (DELETE)\n\n\n  deleteLikeCard(id) {\n    return fetch(this._baseUrl + `/cards/likes/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n}\n\nconst api = new Api({\n  url: \"https://mesto.nomoreparties.co/v1/cohort-41\",\n  headers: {\n    authorization: \"bebc4145-001f-487f-8afd-8c22bbd3883b\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","config","_baseUrl","url","_headers","headers","_checkResponse","res","ok","json","Promise","reject","status","getInitialCards","fetch","method","then","postCard","data","body","JSON","stringify","name","link","deleteCard","id","getUserData","setUserData","about","setNewAvatar","avatar","setLikeCard","deleteLikeCard","api","authorization"],"sources":["/Users/belka/Desktop/yandexPr/react-mesto-auth/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor(config) {\n    this._baseUrl = config.url;\n    this._headers = config.headers;\n  }\n\n  //приватная функция проверки ответа\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  //получить карточки с сервера (GET)\n  getInitialCards() {\n    return fetch(this._baseUrl + \"/cards\", {\n      method: \"GET\",\n      headers: this._headers,\n    }).then(this._checkResponse);\n  }\n\n  //добавить карточку (POST)\n  postCard(data) {\n    return fetch(this._baseUrl + \"/cards\", {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({ name: data.name, link: data.link }),\n    }).then(this._checkResponse);\n  }\n\n  //удалить карточку (DELETE)\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then(this._checkResponse);\n  }\n\n  //получить данные пользователя (GET)\n  getUserData() {\n    return fetch(this._baseUrl + \"/users/me\", {\n      method: \"GET\",\n      headers: this._headers,\n    }).then(this._checkResponse);\n  }\n\n  //заменить данные пользователя (PATCH)\n  setUserData(data) {\n    return fetch(this._baseUrl + \"/users/me\", {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    }).then(this._checkResponse);\n  }\n\n  //заменить аватар (PATCH)\n  setNewAvatar(data) {\n    return fetch(this._baseUrl + `/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar,\n      }),\n    }).then(this._checkResponse);\n  }\n\n  //“залайкать” карточку (PUT)\n  setLikeCard(id) {\n    return fetch(this._baseUrl + `/cards/likes/${id}`, {\n      method: \"PUT\",\n      headers: this._headers,\n    }).then(this._checkResponse);\n  }\n\n  //удалить лайк карточки (DELETE)\n  deleteLikeCard(id) {\n    return fetch(this._baseUrl + `/cards/likes/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then(this._checkResponse);\n  }\n}\n\nconst api = new Api({\n  url: \"https://mesto.nomoreparties.co/v1/cohort-41\",\n  headers: {\n    authorization: \"bebc4145-001f-487f-8afd-8c22bbd3883b\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}